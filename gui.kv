#:import func functionality
#:import NoTransition kivy.uix.screenmanager.NoTransition
#:import Factory kivy.factory.Factory


WindowManager:
    transition: NoTransition()
    LoginScreen:
    ForgotScreen:
    DashboardScreen:



<LoginScreen>:
    name: 'logins'

    FloatLayout:

        Label:
            canvas:
                Color:
                    rgb: 0.4, 0.4, 0.4, 1
                Rectangle:
                    pos: self.pos
                    size: self.size

        Label:
            canvas:
                Color:
                    rgb: 0, 0, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.03
            pos_hint: {'top': 1}

        Label:
            canvas:
                Color:
                    rgb: 0.1, 0.1, 0.1, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.3, 0.055
            pos_hint: {'top': 0.8, 'x': 0.35}

        Label:
            canvas:
                Color:
                    rgb: 1, 1, 1, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.3, 0.6
            pos_hint: {'top': 0.745, 'x': 0.35}

        Label:
            text: 'Log in'
            font_size: 30
            size_hint: 0.1, 0.1
            pos_hint: {'top': 0.82, 'x': 0.34}

        Label:
            text: 'User Name'
            font_size: 20
            color: 0, 0, 0, 1
            size_hint: 0.3, 0.2
            pos_hint: {'top': 0.78, 'x': 0.26}

        TextInput:
            id: username
            multiline: False
            size_hint: 0.22, 0.04
            pos_hint: {'top': 0.66, 'x': 0.378}
            on_text_validate:
                Factory.SecurityQuestion().open() if func.check_account() is True and func.check_input(word=username.text) and func.check_input(word=password.text) else Factory.SecurityQuestion().dismiss()
                app.root.current = 'dashboards' if func.log_in(username.text, password.text) and func.check_account() is False else app.root.current

        Label:
            text: 'Password'
            font_size: 20
            color: 0, 0, 0, 1
            size_hint: 0.3, 0.2
            pos_hint: {'top': 0.66, 'x': 0.256}

        TextInput:
            id: password
            multiline: False
            size_hint: 0.22, 0.04
            pos_hint: {'top': 0.54, 'x': 0.378}
            password: True
            on_text_validate:
                Factory.SecurityQuestion().open() if func.check_account() is True and func.check_input(word=username.text) and func.check_input(word=password.text) else Factory.SecurityQuestion().dismiss()
                app.root.current = 'dashboards' if func.log_in(username.text, password.text) and func.check_account() is False else app.root.current
        
        Button:
            id: signin
            text: 'Sign In'
            font_size: 15
            background_color: 0.1, 0.1, 0.1, 1
            size_hint: 0.05, 0.05
            pos_hint: {'top': 0.30, 'x': 0.55}
            on_release:
                Factory.SecurityQuestion().open() if func.check_account() is True and func.check_input(word=username.text) and func.check_input(word=password.text) else Factory.SecurityQuestion().dismiss()
                app.root.current = 'dashboards' if func.log_in(username.text, password.text) and func.check_account() is False else app.root.current

        Button:
            text: 'Forgot?'
            font_size: 15
            background_color: 0.1, 0.1, 0.1, 1
            size_hint: 0.05, 0.05
            pos_hint: {'top': 0.30, 'x': 0.378}
            on_release:
                app.root.current = 'forgots' if func.check_account() is False else app.root.current

        Button:
            text: 'X'
            size_hint: 0.03, 0.03
            pos_hint: {'top': 1, 'x': 0.97}
            background_color: 0.95, 0, 0, 1
            on_release:
                exit()


<SecurityQuestion@Popup>:
    title: 'Custom Security Question'
    title_size: 18
    separator_color: 0, 1, 0, 1
    size_hint: 0.3, 0.44
    pos_hint: {'top': 0.803, 'x': 0.667}
    auto_dismiss: False

    GridLayout:
        cols: 1

        Label:
            text: ''
            size_hint_y: None
            height: 25

        Label:
            text: "Create your own security question with your corresponding answer below.\n\n*CAUTION*\nMake sure you do not forget the answer to your custom security question!!!\nIt is the only way to recover your account if you ever forget your Username\nor Password."
            font_size: 12
            size_hint_y: None
            height: 50

        Label:
            text: ''
            size_hint_y: None
            height: 15

        Label:
            text: 'Custom Question'
            size_hint_y: None
            height: 40
            text_size: self.size
            halign: 'left'

        TextInput:
            id: question
            multiline: False
            size_hint_y: None
            height: 40

        Label:
            text: 'Your Answer'
            size_hint_y: None
            height: 40
            text_size: self.size
            halign: 'left'

        TextInput:
            id: answer
            multiline: False
            size_hint_y: None
            height: 40

        Label:
            text: ''
            size_hint_y: None
            height: 20

        Button:
            text: 'Done'
            size_hint_y: None
            height: 40
            on_release:
                func.new_account()
                func.new_security(question.text, answer.text)
                app.root.current = 'dashboards'
                root.dismiss()

        Label:
            text: ''
            size_hint_y: None
            height: 15


<ForgotScreen>:
    name: 'forgots'

    FloatLayout:

        Label:
            canvas:
                Color:
                    rgb: 0.6, 0.6, 0.6, 1
                Rectangle:
                    pos: self.pos
                    size: self.size

        Label:
            canvas:
                Color:
                    rgb: 0, 0, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.03
            pos_hint: {'top': 1}

        Label:
            canvas:
                Color:
                    rgb: 0.1, 0.1, 0.1, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.3, 0.055
            pos_hint: {'top': 0.8, 'x': 0.35}

        Label:
            canvas:
                Color:
                    rgb: 1, 1, 1, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.3, 0.6
            pos_hint: {'top': 0.745, 'x': 0.35}

        Label:
            text: 'Account Recovery'
            font_size: 30
            size_hint: 0.1, 0.1
            pos_hint: {'top': 0.82, 'x': 0.395}

        Label:
            text: 
            font_size: 20
            color: 0, 0, 0, 1
            size_hint: 0.3, 0.2
            pos_hint: {'top': 0.78, 'x': 0.244}

        Label:
            text: func.remember_security()
            font_size: 20
            color: 0, 0, 0, 1
            size_hint: 0.28, 0.1
            pos_hint: {'top': 0.75, 'x': 0.36}
            text_size: self.size
            halign: 'left'

        TextInput:
            id: youranswer
            multiline: False
            size_hint: 0.22, 0.04
            pos_hint: {'top': 0.55, 'x': 0.378}
            on_text_validate:
                Factory.AccountRecovery().open() if func.check_security_answer(youranswer.text) else Factory.AccountRecovery().dismiss()
                youranswer.text = '' if func.check_security_answer(youranswer.text) else youranswer.text

        Button:
            text: 'Done'
            font_size: 15
            background_color: 0.1, 0.1, 0.1, 1
            size_hint: 0.05, 0.05
            pos_hint: {'top': 0.45, 'x': 0.55}
            on_release:
                Factory.AccountRecovery().open() if func.check_security_answer(youranswer.text) else Factory.AccountRecovery().dismiss()
                youranswer.text = '' if func.check_security_answer(youranswer.text) else youranswer.text

        Button:
            text: 'Back'
            font_size: 15
            background_color: 0.1, 0.1, 0.1, 1
            size_hint: 0.05, 0.05
            pos_hint: {'top': 0.45, 'x': 0.378}
            on_release:
                app.root.current = 'logins'

        Button:
            text: 'X'
            size_hint: 0.03, 0.03
            pos_hint: {'top': 1, 'x': 0.97}
            background_color: 0.95, 0, 0, 1
            on_release:
                exit()

<AccountRecovery@Popup>:
    title: 'Your Account Log-In Information'
    title_size: 18
    separator_color: 0, 1, 0, 1
    size_hint: 0.3, 0.28
    pos_hint: {'top': 0.803, 'x': 0.667}
    auto_dismiss: False

    GridLayout:
        cols: 1

        Label:
            text: func.recover_account()
            font_size: 30
            size_hint_y: None
            height: 120
            text_size: self.size
            halign: 'left'

        Label:
            text: ' '
            size_hint_y: None
            height: 15

        Button:
            text: 'Back to Log-in page'
            size_hint_y: None
            height: 40
            on_release:
                app.root.current = 'logins'
                root.dismiss()

<DashboardScreen>:
    name: 'dashboards'

    FloatLayout:

        Label:
            canvas:
                Color:
                    rgb: 0.6, 0.6, 0.6, 1
                Rectangle:
                    pos: self.pos
                    size: self.size

        Label:
            canvas:
                Color:
                    rgb: 0, 0, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.03
            pos_hint: {'top': 1}

        Label:
            canvas:
                Color:
                    rgb: 0, 0.5, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.05
            pos_hint: {'top': 0.97}

        Label:
            canvas:
                Color:
                    rgb: 0, 0, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.05

        Label:
            text: 'Dashboard - Budget Buddy'
            font_size: 15
            size_hint: 0.1, 0.03
            pos_hint: {'top': 1, 'x': 0.45}

        Label:
            text: 'Budgeting'
            font_size: 20
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.97, 'x': 0.125}

        Label:
            text: 'Spending'
            font_size: 20
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.97, 'x': 0.45}

        Label:
            text: 'Log New Transactions'
            font_size: 20
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.97, 'x': 0.78}
            
        Button:
            text: 'X'
            size_hint: 0.03, 0.03
            pos_hint: {'top': 1, 'x': 0.97}
            background_color: 0.95, 0, 0, 1
            on_release:
                exit()

        FloatLayout:
            canvas:
                Color:
                    rgb: 1, 1, 1, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.32, 0.87
            pos_hint: {'top': 0.92, 'x': 0.01}

            Label:
                canvas:
                    Color:
                        rgb: 0.15, 0.15, 0.15, 1
                    Rectangle:
                        pos: self.pos
                        size: self.size
                size_hint: 1, 0.165
                pos_hint: {'top': 1, 'x': 0}

            Label:
                text: 'Estimated Savings: '
                font_size: 25
                size_hint: 0.3, 0.1
                pos_hint: {'top': 0.97, 'x': 0.12}
            
            Label:
                id: estimatedsavings
                text: '$' + func.add_commas(func.estimated_savings())
                font_size: 30
                color: func.estimated_savings_color()
                size_hint: 0.3, 0.1
                pos_hint: {'top': 0.97, 'x': 0.6}

            ScrollView:
                size_hint: 0.98, 0.835
                pos_hint: {'top': 0.835, 'x': 0.02}
                do_scroll_x: False
                do_scroll_y: True
                bar_width: 4
                bar_color: 0, 0, 0, 1

                GridLayout:
                    size_hint_x: 0.97
                    size_hint_y: None
                    cols: 2
                    row_default_height: root.height*0.05
                    height: self.minimum_height

                    Label:
                        text: 'Free To Use'
                        font_size: 30
                        color: 0, 0, 0, 1
                        text_size: self.size
                        halign: 'left'

                    Label:
                        id: freetousespending
                        text: func.add_commas(func.remember_spending('FreeToUse'))
                        font_size: 25
                        color: func.remember_color('FreeToUse')
                        text_size: self.size
                        halign: 'right'

                    ProgressBar:
                        id: freetousebar
                        min: 0
                        max: eval(func.remember_budget('FreeToUse'))
                        value: eval(func.find_spending('FreeToUse', 'whole'))

                    TextInput:
                        id: freetouse
                        multiline: False
                        text: func.remember_budget('FreeToUse')
                        color: 0.3, 0.3, 0.3, 1
                        text_size: self.size
                        halign: 'right'
                        valign: 'top'
                        on_text_validate:
                            freetousebar.max = freetouse.text if freetouse.text != '' and func.check_input(num=freetouse.text) and func.new_budget_check('FreeToUse', freetouse.text) else freetousebar.max
                            freetousespending.color = func.remember_color('FreeToUse')
                            freetousebar.value = eval(freetouse.text) if freetousebar.max < freetousebar.value and func.check_input(num=freetouse.text) else eval(func.find_spending('FreeToUse', 'whole'))
                            estimatedsavings.text = '$' + func.add_commas(func.estimated_savings()) if func.check_input(num=freetouse.text) else estimatedsavings.text
                            estimatedsavings.color = func.estimated_savings_color() if func.check_input(num=freetouse.text) else estimatedsavings.color

                    Label:
                        text: 'Utilities'
                        font_size: 30
                        color: 0, 0, 0, 1
                        text_size: self.size
                        halign: 'left'

                    Label:
                        id: utilitiesspending
                        text: func.add_commas(func.remember_spending('Utilities'))
                        font_size: 25
                        color: func.remember_color('Utilities')
                        text_size: self.size
                        halign: 'right'

                    ProgressBar:
                        id: utilitiesbar
                        min: 0
                        max: eval(func.remember_budget('Utilities'))
                        value: eval(func.find_spending('Utilities', 'whole'))

                    TextInput:
                        id: utilities
                        multiline: False
                        text: func.remember_budget('Utilities')
                        color: 0.3, 0.3, 0.3, 1
                        text_size: self.size
                        halign: 'right'
                        valign: 'top'
                        on_text_validate:
                            utilitiesbar.max = utilities.text if utilities.text != '' and func.check_input(num=utilities.text) and func.new_budget_check('Utilities', utilities.text) else utilitiesbar.max
                            utilitiesspending.color = func.remember_color('Utilities')
                            utilitiesbar.value = eval(freetouse.text) if utilitiesbar.max < utilitiesbar.value and func.check_input(num=utilities.text) else eval(func.find_spending('Utilities', 'whole'))
                            estimatedsavings.text = '$' + func.add_commas(func.estimated_savings()) if func.check_input(num=utilities.text) else estimatedsavings.text
                            estimatedsavings.color = func.estimated_savings_color() if func.check_input(num=utilities.text) else estimatedsavings.color

                    Label:
                        text: 'Groceries'
                        font_size: 30
                        color: 0, 0, 0, 1
                        text_size: self.size
                        halign: 'left'

                    Label:
                        id: groceriesspending
                        text: func.add_commas(func.remember_spending('Groceries'))
                        font_size: 25
                        color: func.remember_color('Groceries')
                        text_size: self.size
                        halign: 'right'

                    ProgressBar:
                        id: groceriesbar
                        min: 0
                        max: eval(func.remember_budget('Groceries'))
                        value: eval(func.find_spending('Groceries', 'whole'))

                    TextInput:
                        id: groceries
                        multiline: False
                        text: func.remember_budget('Groceries')
                        color: 0.3, 0.3, 0.3, 1
                        text_size: self.size
                        halign: 'right'
                        valign: 'top'
                        on_text_validate:
                            groceriesbar.max = groceries.text if groceries.text != '' and func.check_input(num=groceries.text) and func.new_budget_check('Groceries', groceries.text) else groceriesbar.max
                            groceriesspending.color = func.remember_color('Groceries')
                            groceriesbar.value = eval(groceries.text) if groceriesbar.max < groceriesbar.value and func.check_input(num=groceries.text) else eval(func.find_spending('Groceries', 'whole'))
                            estimatedsavings.text = '$' + func.add_commas(func.estimated_savings()) if func.check_input(num=groceries.text) else estimatedsavings.text
                            estimatedsavings.color = func.estimated_savings_color() if func.check_input(num=groceries.text) else estimatedsavings.color

                    Label:
                        text: 'Internet'
                        font_size: 30
                        color: 0, 0, 0, 1
                        text_size: self.size
                        halign: 'left'

                    Label:
                        id: internetspending
                        text: func.add_commas(func.remember_spending('Internet'))
                        font_size: 25
                        color: func.remember_color('Internet')
                        text_size: self.size
                        halign: 'right'

                    ProgressBar:
                        id: internetbar
                        min: 0
                        max: eval(func.remember_budget('Internet'))
                        value: eval(func.find_spending('Internet', 'whole'))

                    TextInput:
                        id: internet
                        multiline: False
                        text: func.remember_budget('Internet')
                        color: 0.3, 0.3, 0.3, 1
                        text_size: self.size
                        halign: 'right'
                        valign: 'top'
                        on_text_validate:
                            internetbar.max = internet.text if internet.text != '' and func.check_input(num=internet.text) and func.new_budget_check('Internet', internet.text) else internetbar.max
                            internetspending.color = func.remember_color('Internet')
                            internetbar.value = eval(internet.text) if internetbar.max < internetbar.value and func.check_input(num=internet.text) else eval(func.find_spending('Internet', 'whole'))
                            estimatedsavings.text = '$' + func.add_commas(func.estimated_savings()) if func.check_input(num=internet.text) else estimatedsavings.text
                            estimatedsavings.color = func.estimated_savings_color() if func.check_input(num=internet.text) else estimatedsavings.color

                    Label:
                        text: 'Cell Phone'
                        font_size: 30
                        color: 0, 0, 0, 1
                        text_size: self.size
                        halign: 'left'

                    Label:
                        id: cellphonespending
                        text: func.add_commas(func.remember_spending('CellPhone'))
                        font_size: 25
                        color: func.remember_color('CellPhone')
                        text_size: self.size
                        halign: 'right'

                    ProgressBar:
                        id: cellphonebar
                        min: 0
                        max: eval(func.remember_budget('CellPhone'))
                        value: eval(func.find_spending('CellPhone', 'whole'))

                    TextInput:
                        id: cellphone
                        multiline: False
                        text: func.remember_budget('CellPhone')
                        color: 0.3, 0.3, 0.3, 1
                        text_size: self.size
                        halign: 'right'
                        valign: 'top'
                        on_text_validate:
                            cellphonebar.max = cellphone.text if cellphone.text != '' and func.check_input(num=cellphone.text) and func.new_budget_check('CellPhone', cellphone.text) else cellphonebar.max
                            cellphonespending.color = func.remember_color('CellPhone')
                            cellphonebar.value = eval(cellphone.text) if cellphonebar.max < cellphonebar.value and func.check_input(num=cellphone.text) else eval(func.find_spending('CellPhone', 'whole'))
                            estimatedsavings.text = '$' + func.add_commas(func.estimated_savings()) if func.check_input(num=internet.text) else estimatedsavings.text
                            estimatedsavings.color = func.estimated_savings_color() if func.check_input(num=internet.text) else estimatedsavings.color

                    Label:
                        text: 'Gas'
                        font_size: 30
                        color: 0, 0, 0, 1
                        text_size: self.size
                        halign: 'left'

                    Label:
                        id: gasspending
                        text: func.add_commas(func.remember_spending('Gas'))
                        font_size: 25
                        color: func.remember_color('Gas')
                        text_size: self.size
                        halign: 'right'

                    ProgressBar:
                        id: gasbar
                        min: 0
                        max: eval(func.remember_budget('Gas'))
                        value: eval(func.find_spending('Gas', 'whole'))

                    TextInput:
                        id: gas
                        multiline: False
                        text: func.remember_budget('Gas')
                        color: 0.3, 0.3, 0.3, 1
                        text_size: self.size
                        halign: 'right'
                        valign: 'top'
                        on_text_validate:
                            gasbar.max = gas.text if gas.text != '' and func.check_input(num=gas.text) and func.new_budget_check('Gas', gas.text) else gasbar.max
                            gasspending.color = func.remember_color('Gas')
                            gasbar.value = eval(gas.text) if gasbar.max < gasbar.value and func.check_input(num=gas.text) else eval(func.find_spending('Gas', 'whole'))
                            estimatedsavings.text = '$' + func.add_commas(func.estimated_savings()) if func.check_input(num=gas.text) else estimatedsavings.text
                            estimatedsavings.color = func.estimated_savings_color() if func.check_input(num=gas.text) else estimatedsavings.color

                    Label:
                        text: 'Rent'
                        font_size: 30
                        color: 0, 0, 0, 1
                        text_size: self.size
                        halign: 'left'

                    Label:
                        id: rentspending
                        text: func.add_commas(func.remember_spending('Rent'))
                        font_size: 25
                        color: func.remember_color('Rent')
                        text_size: self.size
                        halign: 'right'

                    ProgressBar:
                        id: rentbar
                        min: 0
                        max: eval(func.remember_budget('Rent'))
                        value: eval(func.find_spending('Rent', 'whole'))

                    TextInput:
                        id: rent
                        multiline: False
                        text: func.remember_budget('Rent')
                        color: 0.3, 0.3, 0.3, 1
                        text_size: self.size
                        halign: 'right'
                        valign: 'top'
                        on_text_validate:
                            rentbar.max = rent.text if rent.text != '' and func.check_input(num=rent.text) and func.new_budget_check('Rent', rent.text) else rentbar.max
                            rentspending.color = func.remember_color('Rent')
                            rentbar.value = eval(rent.text) if rentbar.max < rentbar.value and func.check_input(num=rent.text) else eval(func.find_spending('Rent', 'whole'))
                            estimatedsavings.text = '$' + func.add_commas(func.estimated_savings()) if func.check_input(num=rent.text) else estimatedsavings.text
                            estimatedsavings.color = func.estimated_savings_color() if func.check_input(num=rent.text) else estimatedsavings.color

                    Label:
                        text: 'Bank Account'
                        font_size: 30
                        color: 0, 0, 0, 1
                        text_size: self.size
                        halign: 'left'

                    Label:
                        id: bankaccountspending
                        text: func.add_commas(func.remember_spending('BankAccount'))
                        font_size: 25
                        color: func.remember_color('BankAccount')
                        text_size: self.size
                        halign: 'right'

                    ProgressBar:
                        id: bankaccountbar
                        min: 0
                        max: eval(func.remember_budget('BankAccount'))
                        value: eval(func.find_spending('BankAccount', 'whole'))

                    TextInput:
                        id: bankaccount
                        multiline: False
                        text: func.remember_budget('BankAccount')
                        color: 0.3, 0.3, 0.3, 1
                        text_size: self.size
                        halign: 'right'
                        valign: 'top'
                        on_text_validate:
                            bankaccountbar.max = bankaccount.text if bankaccount.text != '' and func.check_input(num=bankaccount.text) and func.new_budget_check('BankAccount', bankaccount.text) else bankaccountbar.max
                            bankaccountspending.color = func.remember_color('BankAccount')
                            bankaccountbar.value = eval(bankaccount.text) if bankaccountbar.max < bankaccountbar.value and func.check_input(num=bankaccount.text) else eval(func.find_spending('BankAccount', 'whole'))
                            estimatedsavings.text = '$' + func.add_commas(func.estimated_savings()) if func.check_input(num=bankaccount.text) else estimatedsavings.text
                            estimatedsavings.color = func.estimated_savings_color() if func.check_input(num=bankaccount.text) else estimatedsavings.color

                    Label:
                        text: 'Car Insurance'
                        font_size: 30
                        color: 0, 0, 0, 1
                        text_size: self.size
                        halign: 'left'

                    Label:
                        id: carinsurancespending
                        text: func.add_commas(func.remember_spending('CarInsurance'))
                        font_size: 25
                        color: func.remember_color('CarInsurance')
                        text_size: self.size
                        halign: 'right'

                    ProgressBar:
                        id: carinsurancebar
                        min: 0
                        max: eval(func.remember_budget('CarInsurance'))
                        value: eval(func.find_spending('CarInsurance', 'whole'))

                    TextInput:
                        id: carins
                        multiline: False
                        text: func.remember_budget('CarInsurance')
                        color: 0.3, 0.3, 0.3, 1
                        text_size: self.size
                        halign: 'right'
                        valign: 'top'
                        on_text_validate:
                            carinsurancebar.max = carins.text if carins.text != '' and func.check_input(num=carins.text) and func.new_budget_check('CarInsurance', carins.text) else carinsurancebar.max
                            carinsurancespending.color = func.remember_color('CarInsurance')
                            carinsurancebar.value = eval(carins.text) if carinsurancebar.max < carinsurancebar.value and func.check_input(num=carins.text) else eval(func.find_spending('CarInsurance', 'whole'))
                            estimatedsavings.text = '$' + func.add_commas(func.estimated_savings()) if func.check_input(num=carins.text) else estimatedsavings.text
                            estimatedsavings.color = func.estimated_savings_color() if func.check_input(num=carins.text) else estimatedsavings.color

                    Label:
                        text: 'Health Insurance'
                        font_size: 30
                        color: 0, 0, 0, 1
                        text_size: self.size
                        halign: 'left'

                    Label:
                        id: healthinsurancespending
                        text: func.add_commas(func.remember_spending('HealthInsurance'))
                        font_size: 25
                        color: func.remember_color('HealthInsurance')
                        text_size: self.size
                        halign: 'right'

                    ProgressBar:
                        id: healthinsurancebar
                        min: 0
                        max: eval(func.remember_budget('HealthInsurance'))
                        value: eval(func.find_spending('HealthInsurance', 'whole'))

                    TextInput:
                        id: healthins
                        multiline: False
                        text: func.remember_budget('HealthInsurance')
                        color: 0.3, 0.3, 0.3, 1
                        text_size: self.size
                        halign: 'right'
                        valign: 'top'
                        on_text_validate:
                            healthinsurancebar.max = healthins.text if healthins.text != '' and func.check_input(num=healthins.text) and func.new_budget_check('HealthInsurance', healthins.text) else healthinsurancebar.max
                            healthinsurancespending.color = func.remember_color('HealthInsurance')
                            healthinsurancebar.value = eval(healthins.text) if healthinsurancebar.max < healthinsurancebar.value and func.check_input(num=healthins.text) else eval(func.find_spending('HealthInsurance', 'whole'))
                            estimatedsavings.text = '$' + func.add_commas(func.estimated_savings()) if func.check_input(num=healthins.text) else estimatedsavings.text
                            estimatedsavings.color = func.estimated_savings_color() if func.check_input(num=healthins.text) else estimatedsavings.color

                    Label:
                        text: 'Other (unexpected)'
                        font_size: 20
                        color: 0, 0, 0, 1
                        text_size: self.size
                        halign: 'left'

                    Label:
                        id: otherspending
                        text: func.add_commas(func.remember_spending('Other'))
                        font_size: 25
                        color: func.remember_color('Other')
                        text_size: self.size
                        halign: 'right'

                    ProgressBar:
                        id: otherbar
                        min: 0
                        max: eval(func.remember_budget('Other'))
                        value: eval(func.find_spending('Other', 'whole'))

                    TextInput:
                        id: other
                        multiline: False
                        text: func.remember_budget('Other')
                        color: 0.3, 0.3, 0.3, 1
                        text_size: self.size
                        halign: 'right'
                        valign: 'top'
                        on_text_validate:
                            otherbar.max = other.text if other.text != '' and func.check_input(num=other.text) and func.new_budget_check('Other', other.text) else otherbar.max
                            otherspending.color = func.remember_color('Other')
                            otherbar.value = eval(other.text) if otherbar.max < otherbar.value and func.check_input(num=other.text) else eval(func.find_spending('Other', 'whole'))
                            estimatedsavings.text = '$' + func.add_commas(func.estimated_savings()) if func.check_input(num=other.text) else estimatedsavings.text
                            estimatedsavings.color = func.estimated_savings_color() if func.check_input(num=other.text) else estimatedsavings.color

                    Label:
                        text: ''
                        font_size: 25
                        color: 0, 0, 0, 1
                        text_size: self.size
                        halign: 'right'

        FloatLayout:
            canvas:
                Color:
                    rgb: 1, 1, 1, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.32, 0.87
            pos_hint: {'top': 0.92, 'x': 0.34}

            GridLayout:
                size_hint_x: 0.97
                size_hint_y: None
                cols: 1
                row_default_height: root.height*0.05
                height: self.minimum_height
                pos_hint: {'top': 0.98, 'x': 0.01}

                Label:
                    text: func.date_range()
                    font_size: 15
                    color: 0, 0, 0, 1
                    size_hint: 0.1, 0.05
                    pos_hint: {'top': 0.99, 'x': 0.45}
                                
                Label:
                    text: 'Total Income and Spending Analysis'
                    font_size: 30
                    color: 0, 0, 0, 1

                ProgressBar:
                    id: mainbar
                    min: 0
                    max: eval(func.find_income())
                    value: eval(func.calc_savings_spending('spending'))

                GridLayout:
                    size_hint_x: 0.97
                    size_hint_y: None
                    cols: 3
                    row_default_height: root.height*0.02
                    height: self.minimum_height
                    pos_hint: {'top': 0.98, 'x': 0.01}

                    Label:
                        text: ''
                        size_hint_y: None
                        height: 15
                    
                    Label:
                        text: ''
                        size_hint_y: None
                        height: 15

                    Label:
                        text: ''
                        size_hint_y: None
                        height: 15

                    Label:
                        text: 'INCOME'
                        color: 0, 0, 0, 1
                        font_size: 25
                    
                    Label:
                        text: 'SAVING'
                        color: 0, 0, 0, 1
                        font_size: 25

                    Label:
                        text: 'SPENT'
                        color: 0, 0, 0, 1
                        font_size: 25

                    Label:
                        text: ''
                    
                    Label:
                        text: ''

                    Label:
                        text: ''

                    Label:
                        id: totalincome
                        text: '$' + func.add_commas(func.find_income())
                        color: 0, 0.5, 0, 1
                        font_size: 20

                    Label:
                        id: totalsavings
                        text: '$' + func.add_commas(func.calc_savings_spending('savings'))
                        color: func.estimated_total_savings(totalsavings.text)
                        font_size: 20
                    
                    Label:
                        id: totalspending
                        text: '$' + func.add_commas(func.calc_savings_spending('spending'))
                        color: 1, 0, 0, 1
                        font_size: 20

                    Label:
                        text: ''
                        size_hint_y: None
                        height: 50
                    
                    Label:
                        text: ''
                        size_hint_y: None
                        height: 50

                    Label:
                        text: ''
                        size_hint_y: None
                        height: 50

                    Label:
                        text: 'Category'
                        color: 0, 0, 0, 1
                        font_size: 25
                    
                    Label: 
                        text: 'Percentage'
                        color: 0, 0, 0, 1
                        font_size: 25

                    Label:
                        text: 'Total Spent'
                        color: 0, 0, 0, 1
                        font_size: 25

                    Label:
                        canvas:
                            Color:
                                rgb: 1, 0, 0, 1
                            Rectangle:
                                pos: self.pos
                                size: self.size
                        size_hint_y: None
                        height: 3

                    Label:
                        canvas:
                            Color:
                                rgb: 1, 0, 0, 1
                            Rectangle:
                                pos: self.pos
                                size: self.size
                        size_hint_y: None
                        height: 3
                        
                    Label:
                        canvas:
                            Color:
                                rgb: 1, 0, 0, 1
                            Rectangle:
                                pos: self.pos
                                size: self.size
                        size_hint_y: None
                        height: 3

                ScrollView:
                    do_scroll_x: False
                    do_scroll_y: True
                    bar_width: 4
                    bar_color: 0, 0, 0, 1
                    size_hint_y: None
                    height: 454

                    GridLayout:
                        size_hint_x: 0.97
                        size_hint_y: None
                        cols: 3
                        row_default_height: root.height*0.03
                        height: self.minimum_height

                        Label:
                            text: ''
                            
                        Label:
                            text: ''

                        Label:
                            text: ''

                        Label:
                            text: 'Free To Use'
                            color: 0, 0, 0, 1 
                            font_size: 20

                        Label:
                            id: freetousepercent
                            text: func.find_spending('FreeToUse', 'percent') + '%'
                            color: 0, 0, 0, 1 

                        Label:
                            id: freetousetotal
                            text: '$' + func.add_commas(func.find_spending('FreeToUse', 'whole'))
                            color: 0, 0, 0, 1 

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2
                            
                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            text: 'Utilities'
                            color: 0, 0, 0, 1 
                            font_size: 20

                        Label:
                            id: utilitiespercent
                            text: func.find_spending('Utilities', 'percent') + '%'
                            color: 0, 0, 0, 1 

                        Label:
                            id: utilitiestotal
                            text: '$' + func.add_commas(func.find_spending('Utilities', 'whole'))
                            color: 0, 0, 0, 1 

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2
                            
                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            text: 'Groceries'
                            color: 0, 0, 0, 1 
                            font_size: 20

                        Label:
                            id: groceriespercent
                            text: func.find_spending('Groceries', 'percent') + '%'
                            color: 0, 0, 0, 1 

                        Label:
                            id: groceriestotal
                            text: '$' + func.add_commas(func.find_spending('Groceries', 'whole'))
                            color: 0, 0, 0, 1 

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2
                            
                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            text: 'Internet'
                            color: 0, 0, 0, 1 
                            font_size: 20

                        Label:
                            id: internetpercent
                            text: func.find_spending('Internet', 'percent') + '%'
                            color: 0, 0, 0, 1 

                        Label:
                            id: internettotal
                            text: '$' + func.add_commas(func.find_spending('Internet', 'whole'))
                            color: 0, 0, 0, 1 

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2
                            
                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            text: 'Cell Phone'
                            color: 0, 0, 0, 1 
                            font_size: 20

                        Label:
                            id: cellphonepercent
                            text: func.find_spending('CellPhone', 'percent') + '%'
                            color: 0, 0, 0, 1 

                        Label:
                            id: cellphonetotal
                            text: '$' + func.add_commas(func.find_spending('CellPhone', 'whole'))
                            color: 0, 0, 0, 1 

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2
                            
                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            text: 'Gas'
                            color: 0, 0, 0, 1 
                            font_size: 20

                        Label:
                            id: gaspercent
                            text: func.find_spending('Gas', 'percent') + '%'
                            color: 0, 0, 0, 1 

                        Label:
                            id: gastotal
                            text: '$' + func.add_commas(func.find_spending('Gas', 'whole'))
                            color: 0, 0, 0, 1 

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2
                            
                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            text: 'Rent'
                            color: 0, 0, 0, 1 
                            font_size: 20

                        Label:
                            id: rentpercent
                            text: func.find_spending('Rent', 'percent') + '%'
                            color: 0, 0, 0, 1 

                        Label:
                            id: renttotal
                            text: '$' + func.add_commas(func.find_spending('Rent', 'whole'))
                            color: 0, 0, 0, 1 

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2
                            
                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            text: 'Bank Account'
                            color: 0, 0, 0, 1 
                            font_size: 20

                        Label:
                            id: bankaccountpercent
                            text: func.find_spending('BankAccount', 'percent') + '%'
                            color: 0, 0, 0, 1 

                        Label:
                            id: bankaccounttotal
                            text: '$' + func.add_commas(func.find_spending('BankAccount', 'whole'))
                            color: 0, 0, 0, 1 

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2
                            
                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            text: 'Car Insurance'
                            color: 0, 0, 0, 1 
                            font_size: 20

                        Label:
                            id: carinsurancepercent
                            text: func.find_spending('CarInsurance', 'percent') + '%'
                            color: 0, 0, 0, 1 

                        Label:
                            id: carinsurancetotal
                            text: '$' + func.add_commas(func.find_spending('CarInsurance', 'whole'))
                            color: 0, 0, 0, 1 

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2
                            
                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            text: 'Health Insurance'
                            color: 0, 0, 0, 1 
                            font_size: 20

                        Label:
                            id: healthinsurancepercent
                            text: func.find_spending('HealthInsurance', 'percent') + '%'
                            color: 0, 0, 0, 1 

                        Label:
                            id: healthinsurancetotal
                            text: '$' + func.add_commas(func.find_spending('HealthInsurance', 'whole'))
                            color: 0, 0, 0, 1 

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2
                            
                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            text: 'Other'
                            color: 0, 0, 0, 1 
                            font_size: 20 

                        Label:
                            id: otherpercent
                            text: func.find_spending('Other', 'percent') + '%'
                            color: 0, 0, 0, 1 

                        Label:
                            id: othertotal
                            text: '$' + func.add_commas(func.find_spending('Other', 'whole'))
                            color: 0, 0, 0, 1 

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2
                            
                        Label:
                            canvas:
                                Color:
                                    rgb: 0.2, 0.2, 0.2, 1
                                Rectangle:
                                    pos: self.pos
                                    size: self.size
                            size_hint_y: None
                            height: 2

                        Label:
                            text: ''
                            
                        Label:
                            text: ''

                        Label:
                            text: ''

        FloatLayout:
            canvas:
                Color:
                    rgb: 1, 1, 1, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.32, 0.87
            pos_hint: {'top': 0.92, 'x': 0.67}

            Label:
                text: 'Earned or Spent:'
                color: 0, 0, 0, 1
                font_size: 30
                size_hint: 0.05, 0.05
                pos_hint: {'top': 0.945, 'x': 0.25}

            Button:
                id: earned
                text: 'Earned'
                background_color: 0.4, 0.4, 0.4, 1
                size_hint: 0.15, 0.08
                pos_hint: {'top': 0.955, 'x': 0.55}
                on_release:
                    func.earn_or_spend('earned')
                    earned.background_color = 0, 1, 0, 1
                    spent.background_color = 0.4, 0.4, 0.4, 1

            Button:
                id: spent
                text: 'Spent'
                background_color: 0.4, 0.4, 0.4, 1
                size_hint: 0.15, 0.08
                pos_hint: {'top': 0.955, 'x': 0.75}
                on_release:
                    func.earn_or_spend('spent')
                    spent.background_color = 0, 1, 0, 1
                    earned.background_color = 0.4, 0.4, 0.4, 1


            Label:
                canvas:
                    Color:
                        rgb: 0.2, 0.2, 0.2, 1
                    Rectangle:
                        pos: self.pos
                        size: self.size
                size_hint: 0.98, 0.005
                pos_hint: {'top': 0.84, 'x': 0.01}

            Label:
                text: 'Amount:'
                color: 0, 0, 0, 1
                font_size: 30
                size_hint: 0.05, 0.05
                pos_hint: {'top': 0.75, 'x': 0.145}

            TextInput:
                id: amount
                multiline: False
                size_hint: 0.57, 0.05
                pos_hint: {'top': 0.75, 'x': 0.33}
                on_text_validate:
                    func.new_amount(amount.text) if func.check_input(num=amount.text) else func.new_amount('0')

            Label:
                canvas:
                    Color:
                        rgb: 0.2, 0.2, 0.2, 1
                    Rectangle:
                        pos: self.pos
                        size: self.size
                size_hint: 0.98, 0.005
                pos_hint: {'top': 0.608, 'x': 0.01}

            Label:
                text: 'Category:'
                color: 0, 0, 0, 1
                font_size: 30
                size_hint: 0.05, 0.05
                pos_hint: {'top': 0.55, 'x': 0.155}

            Label:
                canvas:
                    Color:
                        rgb: 0.2, 0.2, 0.2, 1
                    Rectangle:
                        pos: self.pos
                        size: self.size
                size_hint: 0.98, 0.005
                pos_hint: {'top': 0.18, 'x': 0.01}

            Button:
                text: 'Log it'
                font_size: 30
                background_color: 0, 1, 0, 1
                size_hint: 0.2, 0.1
                pos_hint: {'top': 0.135, 'x': 0.05}
                on_release:

                    func.new_income()
                    amount.text = ''
                    
                    freetousespending.text = func.add_commas(func.log_it()) if func.choose_category() == 'FreeToUse' and func.user_earned() == False else freetousespending.text
                    freetousebar.value = eval(func.find_spending('FreeToUse', 'whole')) if func.choose_category() == 'FreeToUse' and func.user_earned() == False else freetousebar.value
                    freetousetotal.text = '$' + func.add_commas(func.find_spending('FreeToUse', 'whole')) if func.choose_category() == 'FreeToUse' and func.user_earned() == False else '$' + freetousespending.text
                    
                    utilitiesspending.text = func.add_commas(func.log_it()) if func.choose_category() == 'Utilities' and func.user_earned() == False else utilitiesspending.text
                    utilitiesbar.value = eval(func.find_spending('Utilities', 'whole')) if func.choose_category() == 'Utilities' and func.user_earned() == False else utilitiesbar.value
                    utilitiestotal.text = '$' + func.add_commas(func.find_spending('Utilities', 'whole')) if func.choose_category() == 'Utilities' and func.user_earned() == False else '$' + utilitiesspending.text

                    groceriesspending.text = func.add_commas(func.log_it()) if func.choose_category() == 'Groceries' and func.user_earned() == False else groceriesspending.text
                    groceriesbar.value = eval(func.find_spending('Groceries', 'whole')) if func.choose_category() == 'Groceries' and func.user_earned() == False else groceriesbar.value
                    groceriestotal.text = '$' + func.add_commas(func.find_spending('Groceries', 'whole')) if func.choose_category() == 'Groceries' and func.user_earned() == False else '$' + groceriesspending.text

                    internetspending.text = func.add_commas(func.log_it()) if func.choose_category() == 'Internet' and func.user_earned() == False else internetspending.text
                    internetbar.value = eval(func.find_spending('Internet', 'whole')) if func.choose_category() == 'Internet' and func.user_earned() == False else internetbar.value
                    internettotal.text = '$' + func.add_commas(func.find_spending('Internet', 'whole')) if func.choose_category() == 'Internet' and func.user_earned() == False else '$' + internetspending.text

                    cellphonespending.text = func.add_commas(func.log_it()) if func.choose_category() == 'CellPhone' and func.user_earned() == False else cellphonespending.text
                    cellphonebar.value = eval(func.find_spending('CellPhone', 'whole')) if func.choose_category() == 'CellPhone' and func.user_earned() == False else cellphonebar.value
                    cellphonetotal.text = '$' + func.add_commas(func.find_spending('CellPhone', 'whole')) if func.choose_category() == 'CellPhone' and func.user_earned() == False else '$' + cellphonespending.text

                    gasspending.text = func.add_commas(func.log_it()) if func.choose_category() == 'Gas' and func.user_earned() == False else gasspending.text
                    gasbar.value = eval(func.find_spending('Gas', 'whole')) if func.choose_category() == 'Gas' and func.user_earned() == False else gasbar.value
                    gastotal.text = '$' + func.add_commas(func.find_spending('Gas', 'whole')) if func.choose_category() == 'Gas' and func.user_earned() == False else '$' + gasspending.text

                    rentspending.text = func.add_commas(func.log_it()) if func.choose_category() == 'Rent' and func.user_earned() == False else rentspending.text
                    rentbar.value = eval(func.find_spending('Rent', 'whole')) if func.choose_category() == 'Rent' and func.user_earned() == False else rentbar.value
                    renttotal.text = '$' + func.add_commas(func.find_spending('Rent', 'whole')) if func.choose_category() == 'Rent' and func.user_earned() == False else '$' + rentspending.text

                    bankaccountspending.text = func.add_commas(func.log_it()) if func.choose_category() == 'BankAccount' and func.user_earned() == False else bankaccountspending.text
                    bankaccountbar.value = eval(func.find_spending('BankAccount', 'whole')) if func.choose_category() == 'BankAccount' and func.user_earned() == False else bankaccountbar.value
                    bankaccounttotal.text = '$' + func.add_commas(func.find_spending('BankAccount', 'whole')) if func.choose_category() == 'BankAccount' and func.user_earned() == False else '$' + bankaccountspending.text

                    carinsurancespending.text = func.add_commas(func.log_it()) if func.choose_category() == 'CarInsurance' and func.user_earned() == False else carinsurancespending.text
                    carinsurancebar.value = eval(func.find_spending('CarInsurance', 'whole')) if func.choose_category() == 'CarInsurance' and func.user_earned() == False else carinsurancebar.value
                    carinsurancetotal.text = '$' + func.add_commas(func.find_spending('CarInsurance', 'whole')) if func.choose_category() == 'CarInsurance' and func.user_earned() == False else '$' + carinsurancespending.text

                    healthinsurancespending.text = func.add_commas(func.log_it()) if func.choose_category() == 'HealthInsurance' and func.user_earned() == False else healthinsurancespending.text
                    healthinsurancebar.value = eval(func.find_spending('HealthInsurance', 'whole')) if func.choose_category() == 'HealthInsurance' and func.user_earned() == False else healthinsurancebar.value
                    healthinsurancetotal.text = '$' + func.add_commas(func.find_spending('HealthInsurance', 'whole')) if func.choose_category() == 'HealthInsurance' and func.user_earned() == False else '$' + healthinsurancespending.text

                    otherspending.text = func.add_commas(func.log_it()) if func.choose_category() == 'Other' and func.user_earned() == False else otherspending.text
                    otherbar.value = eval(func.find_spending('Other', 'whole')) if func.choose_category() == 'Other' and func.user_earned() == False else otherbar.value
                    othertotal.text = '$' + func.add_commas(func.find_spending('Other', 'whole')) if func.choose_category() == 'Other' and func.user_earned() == False else '$' + otherspending.text

                    freetousespending.color = func.remember_color('FreeToUse') if func.user_earned() == False else freetousespending.color
                    utilitiesspending.color = func.remember_color('Utilities') if func.user_earned() == False else utilitiesspending.color
                    groceriesspending.color = func.remember_color('Groceries') if func.user_earned() == False else groceriesspending.color
                    internetspending.color = func.remember_color('Internet') if func.user_earned() == False else internetspending.color
                    cellphonespending.color = func.remember_color('CellPhone') if func.user_earned() == False else cellphonespending.color
                    gasspending.color = func.remember_color('Gas') if func.user_earned() == False else gasspending.color
                    rentspending.color = func.remember_color('Rent') if func.user_earned() == False else rentspending.color
                    bankaccountspending.color = func.remember_color('BankAccount') if func.user_earned() == False else bankaccountspending.color
                    carinsurancespending.color = func.remember_color('CarInsurance') if func.user_earned() == False else carinsurancespending.color
                    healthinsurancespending.color = func.remember_color('HealthInsurance') if func.user_earned() == False else healthinsurancespending.color
                    otherspending.color = func.remember_color('Other') if func.user_earned() == False else otherspending.color

                    freetousepercent.text = func.find_spending('FreeToUse', 'percent') + '%' if func.user_earned() == False else freetousepercent.text
                    utilitiespercent.text = func.find_spending('Utilities', 'percent') + '%' if func.user_earned() == False else utilitiespercent.text
                    groceriespercent.text = func.find_spending('Groceries', 'percent') + '%' if func.user_earned() == False else groceriespercent.text
                    internetpercent.text = func.find_spending('Internet', 'percent') + '%' if func.user_earned() == False else internetpercent.text
                    cellphonepercent.text = func.find_spending('CellPhone', 'percent') + '%' if func.user_earned() == False else cellphonepercent.text
                    gaspercent.text = func.find_spending('Gas', 'percent') + '%' if func.user_earned() == False else gaspercent.text
                    rentpercent.text = func.find_spending('Rent', 'percent') + '%' if func.user_earned() == False else rentpercent.text
                    bankaccountpercent.text = func.find_spending('BankAccount', 'percent') + '%' if func.user_earned() == False else bankaccountpercent.text
                    carinsurancepercent.text = func.find_spending('CarInsurance', 'percent') + '%' if func.user_earned() == False else carinsurancepercent.text
                    healthinsurancepercent.text = func.find_spending('HealthInsurance', 'percent') + '%' if func.user_earned() == False else healthinsurancepercent.text
                    otherpercent.text = func.find_spending('Other', 'percent') + '%' if func.user_earned() == False else otherpercent.text

                    estimatedsavings.text = '$' + func.add_commas(func.estimated_savings())
                    estimatedsavings.color = func.estimated_savings_color()

                    mainbar.max = eval(func.find_income())
                    mainbar.value = eval(func.calc_savings_spending('spending'))
                    totalincome.text = '$' + func.add_commas(func.find_income())
                    totalspending.text = '$' + func.add_commas(func.calc_savings_spending('spending'))
                    totalsavings.text = '$' + func.add_commas(func.calc_savings_spending('savings'))
                    totalsavings.color = func.estimated_total_savings(totalsavings.text)

                    earned.background_color = 0.4, 0.4, 0.4, 1
                    spent.background_color = 0.4, 0.4, 0.4, 1
                    freetouselog.background_color = 0.4, 0.4, 0.4, 1
                    utilitieslog.background_color = 0.4, 0.4, 0.4, 1
                    grocerieslog.background_color = 0.4, 0.4, 0.4, 1
                    internetlog.background_color = 0.4, 0.4, 0.4, 1
                    cellphonelog.background_color = 0.4, 0.4, 0.4, 1
                    gaslog.background_color = 0.4, 0.4, 0.4, 1
                    rentlog.background_color = 0.4, 0.4, 0.4, 1
                    bankaccountlog.background_color = 0.4, 0.4, 0.4, 1
                    carinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                    healthinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                    otherlog.background_color = 0.4, 0.4, 0.4, 1

                    func.clean_transaction()

            ScrollView:
                do_scroll_x: False
                do_scroll_y: True
                bar_width: 4
                bar_color: 0, 0, 0, 1
                size_hint: 0.55, 0.3
                pos_hint: {'top': 0.535, 'x': 0.35}

                GridLayout:
                    size_hint_x: 0.97
                    size_hint_y: None
                    cols: 1
                    row_default_height: root.height*0.072
                    height: self.minimum_height

                    Button:
                        id: freetouselog
                        text: 'Free To Use'
                        font_size: 20
                        background_color: 0.4, 0.4, 0.4, 1
                        size_hint_y: None
                        height: 75
                        on_release:
                            func.transaction_type('FreeToUse')
                            freetouselog.background_color = 0, 1, 0, 1
                            utilitieslog.background_color = 0.4, 0.4, 0.4, 1
                            grocerieslog.background_color = 0.4, 0.4, 0.4, 1
                            internetlog.background_color = 0.4, 0.4, 0.4, 1
                            cellphonelog.background_color = 0.4, 0.4, 0.4, 1
                            gaslog.background_color = 0.4, 0.4, 0.4, 1
                            rentlog.background_color = 0.4, 0.4, 0.4, 1
                            bankaccountlog.background_color = 0.4, 0.4, 0.4, 1
                            carinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            healthinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            otherlog.background_color = 0.4, 0.4, 0.4, 1

                    Button:
                        id: utilitieslog
                        text: 'Utilities'
                        font_size: 20
                        background_color: 0.4, 0.4, 0.4, 1
                        size_hint_y: None
                        height: 75
                        on_release:
                            func.transaction_type('Utilities')
                            freetouselog.background_color = 0.4, 0.4, 0.4, 1
                            utilitieslog.background_color = 0, 1, 0, 1
                            grocerieslog.background_color = 0.4, 0.4, 0.4, 1
                            internetlog.background_color = 0.4, 0.4, 0.4, 1
                            cellphonelog.background_color = 0.4, 0.4, 0.4, 1
                            gaslog.background_color = 0.4, 0.4, 0.4, 1
                            rentlog.background_color = 0.4, 0.4, 0.4, 1
                            bankaccountlog.background_color = 0.4, 0.4, 0.4, 1
                            carinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            healthinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            otherlog.background_color = 0.4, 0.4, 0.4, 1

                    Button:
                        id: grocerieslog
                        text: 'Groceries'
                        font_size: 20
                        background_color: 0.4, 0.4, 0.4, 1
                        size_hint_y: None
                        height: 75
                        on_release:
                            func.transaction_type('Groceries')
                            freetouselog.background_color = 0.4, 0.4, 0.4, 1
                            utilitieslog.background_color = 0.4, 0.4, 0.4, 1
                            grocerieslog.background_color = 0, 1, 0, 1
                            internetlog.background_color = 0.4, 0.4, 0.4, 1
                            cellphonelog.background_color = 0.4, 0.4, 0.4, 1
                            gaslog.background_color = 0.4, 0.4, 0.4, 1
                            rentlog.background_color = 0.4, 0.4, 0.4, 1
                            bankaccountlog.background_color = 0.4, 0.4, 0.4, 1
                            carinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            healthinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            otherlog.background_color = 0.4, 0.4, 0.4, 1

                    Button:
                        id: internetlog
                        text: 'Internet'
                        font_size: 20
                        background_color: 0.4, 0.4, 0.4, 1
                        size_hint_y: None
                        height: 75
                        on_release:
                            func.transaction_type('Internet')
                            freetouselog.background_color = 0.4, 0.4, 0.4, 1
                            utilitieslog.background_color = 0.4, 0.4, 0.4, 1
                            grocerieslog.background_color = 0.4, 0.4, 0.4, 1
                            internetlog.background_color = 0, 1, 0, 1
                            cellphonelog.background_color = 0.4, 0.4, 0.4, 1
                            gaslog.background_color = 0.4, 0.4, 0.4, 1
                            rentlog.background_color = 0.4, 0.4, 0.4, 1
                            bankaccountlog.background_color = 0.4, 0.4, 0.4, 1
                            carinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            healthinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            otherlog.background_color = 0.4, 0.4, 0.4, 1

                    Button:
                        id: cellphonelog
                        text: 'Cell Phone'
                        font_size: 20
                        background_color: 0.4, 0.4, 0.4, 1
                        size_hint_y: None
                        height: 75
                        on_release:
                            func.transaction_type('CellPhone')
                            freetouselog.background_color = 0.4, 0.4, 0.4, 1
                            utilitieslog.background_color = 0.4, 0.4, 0.4, 1
                            grocerieslog.background_color = 0.4, 0.4, 0.4, 1
                            internetlog.background_color = 0.4, 0.4, 0.4, 1
                            cellphonelog.background_color = 0, 1, 0, 1
                            gaslog.background_color = 0.4, 0.4, 0.4, 1
                            rentlog.background_color = 0.4, 0.4, 0.4, 1
                            bankaccountlog.background_color = 0.4, 0.4, 0.4, 1
                            carinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            healthinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            otherlog.background_color = 0.4, 0.4, 0.4, 1

                    Button:
                        id: gaslog
                        text: 'Gas'
                        font_size: 20
                        background_color: 0.4, 0.4, 0.4, 1
                        size_hint_y: None
                        height: 75
                        on_release:
                            func.transaction_type('Gas')
                            freetouselog.background_color = 0.4, 0.4, 0.4, 1
                            utilitieslog.background_color = 0.4, 0.4, 0.4, 1
                            grocerieslog.background_color = 0.4, 0.4, 0.4, 1
                            internetlog.background_color = 0.4, 0.4, 0.4, 1
                            cellphonelog.background_color = 0.4, 0.4, 0.4, 1
                            gaslog.background_color = 0, 1, 0, 1
                            rentlog.background_color = 0.4, 0.4, 0.4, 1
                            bankaccountlog.background_color = 0.4, 0.4, 0.4, 1
                            carinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            healthinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            otherlog.background_color = 0.4, 0.4, 0.4, 1

                    Button:
                        id: rentlog
                        text: 'Rent'
                        font_size: 20
                        background_color: 0.4, 0.4, 0.4, 1
                        size_hint_y: None
                        height: 75
                        on_release:
                            func.transaction_type('Rent')
                            freetouselog.background_color = 0.4, 0.4, 0.4, 1
                            utilitieslog.background_color = 0.4, 0.4, 0.4, 1
                            grocerieslog.background_color = 0.4, 0.4, 0.4, 1
                            internetlog.background_color = 0.4, 0.4, 0.4, 1
                            cellphonelog.background_color = 0.4, 0.4, 0.4, 1
                            gaslog.background_color = 0.4, 0.4, 0.4, 1
                            rentlog.background_color = 0, 1, 0, 1
                            bankaccountlog.background_color = 0.4, 0.4, 0.4, 1
                            carinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            healthinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            otherlog.background_color = 0.4, 0.4, 0.4, 1

                    Button:
                        id: bankaccountlog
                        text: 'Bank Account'
                        font_size: 20
                        background_color: 0.4, 0.4, 0.4, 1
                        size_hint_y: None
                        height: 75
                        on_release:
                            func.transaction_type('BankAccount')
                            freetouselog.background_color = 0.4, 0.4, 0.4, 1
                            utilitieslog.background_color = 0.4, 0.4, 0.4, 1
                            grocerieslog.background_color = 0.4, 0.4, 0.4, 1
                            internetlog.background_color = 0.4, 0.4, 0.4, 1
                            cellphonelog.background_color = 0.4, 0.4, 0.4, 1
                            gaslog.background_color = 0.4, 0.4, 0.4, 1
                            rentlog.background_color = 0.4, 0.4, 0.4, 1
                            bankaccountlog.background_color = 0, 1, 0, 1
                            carinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            healthinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            otherlog.background_color = 0.4, 0.4, 0.4, 1

                    Button:
                        id: carinsurancelog
                        text: 'Car Insurance'
                        font_size: 20
                        background_color: 0.4, 0.4, 0.4, 1
                        size_hint_y: None
                        height: 75
                        on_release:
                            func.transaction_type('CarInsurance')
                            freetouselog.background_color = 0.4, 0.4, 0.4, 1
                            utilitieslog.background_color = 0.4, 0.4, 0.4, 1
                            grocerieslog.background_color = 0.4, 0.4, 0.4, 1
                            internetlog.background_color = 0.4, 0.4, 0.4, 1
                            cellphonelog.background_color = 0.4, 0.4, 0.4, 1
                            gaslog.background_color = 0.4, 0.4, 0.4, 1
                            rentlog.background_color = 0.4, 0.4, 0.4, 1
                            bankaccountlog.background_color = 0.4, 0.4, 0.4, 1
                            carinsurancelog.background_color = 0, 1, 0, 1
                            healthinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            otherlog.background_color = 0.4, 0.4, 0.4, 1

                    Button:
                        id: healthinsurancelog
                        text: 'Health Insurance'
                        font_size: 20
                        background_color: 0.4, 0.4, 0.4, 1
                        size_hint_y: None
                        height: 75
                        on_release:
                            func.transaction_type('HealthInsurance')
                            freetouselog.background_color = 0.4, 0.4, 0.4, 1
                            utilitieslog.background_color = 0.4, 0.4, 0.4, 1
                            grocerieslog.background_color = 0.4, 0.4, 0.4, 1
                            internetlog.background_color = 0.4, 0.4, 0.4, 1
                            cellphonelog.background_color = 0.4, 0.4, 0.4, 1
                            gaslog.background_color = 0.4, 0.4, 0.4, 1
                            rentlog.background_color = 0.4, 0.4, 0.4, 1
                            bankaccountlog.background_color = 0.4, 0.4, 0.4, 1
                            carinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            healthinsurancelog.background_color = 0, 1, 0, 1
                            otherlog.background_color = 0.4, 0.4, 0.4, 1

                    Button:
                        id: otherlog
                        text: 'Other'
                        font_size: 20
                        background_color: 0.4, 0.4, 0.4, 1
                        size_hint_y: None
                        height: 75
                        on_release:
                            func.transaction_type('Other')
                            freetouselog.background_color = 0.4, 0.4, 0.4, 1
                            utilitieslog.background_color = 0.4, 0.4, 0.4, 1
                            grocerieslog.background_color = 0.4, 0.4, 0.4, 1
                            internetlog.background_color = 0.4, 0.4, 0.4, 1
                            cellphonelog.background_color = 0.4, 0.4, 0.4, 1
                            gaslog.background_color = 0.4, 0.4, 0.4, 1
                            rentlog.background_color = 0.4, 0.4, 0.4, 1
                            bankaccountlog.background_color = 0.4, 0.4, 0.4, 1
                            carinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            healthinsurancelog.background_color = 0.4, 0.4, 0.4, 1
                            otherlog.background_color = 0, 1, 0, 1

        Button:
            text: 'View Spending History'
            font_size: 20
            background_color: 0, 1, 0, 1
            size_hint: 0.322, 0.05
            pos_hint: {'top': 0.05, 'x': 0.339}
            on_release:
                Factory.SpendingHistory().open()


<SpendingHistory@Popup>:
    title: 'Current Total Savings'
    title_align: 'center'
    separator_color: 0, 1, 0, 1
    size_hint: 0.328, 0.984
    pos_hint: {'top': 0.9755, 'x': 0.667}
    auto_dismiss: False

    FloatLayout:
        size_hint: 0.3, 1
        pos_hint: {'top': 1, 'x': 0.667}

        GridLayout:
            cols: 1
            size_hint: 1, 1
            pos_hint: {'top': 1, 'x': 0}

            Label:
                id: historytotalsavings
                text: func.add_commas(func.total_savings())
                color: func.estimated_total_savings(historytotalsavings.text)
                font_size: 40

            Label:
                text: 'Month' + (' ' * 19) + 'Saved' + (' ' * 19) + 'Spent' + (' ' * 19) + 'Income'

            Label:
                canvas:
                    Color:
                        rgb: 0, 1, 0, 1
                    Rectangle:
                        pos: self.pos
                        size: self.size
                size_hint_y: None
                height: 2

            ScrollView:
                do_scroll_x: False
                do_scroll_y: True
                bar_width: 4
                bar_color: 0, 0, 0, 1
                size_hint_y: None
                height: 635

                GridLayout:
                    size_hint_x: 1
                    size_hint_y: None
                    cols: 4
                    row_default_height: root.height*0.04
                    height: self.minimum_height

                    Label:
                        text: func.remember_month(-1)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-1))
                        color: func.estimated_total_savings(self.text)
                    
                    Label:
                        text: func.add_commas(func.remember_month(spent=-1))

                    Label:
                        text: func.add_commas(func.remember_month(income=-1))

                    Label:
                        text: func.remember_month(-2)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-2))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-2))

                    Label:
                        text: func.add_commas(func.remember_month(income=-2))

                    Label:
                        text: func.remember_month(-3)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-3))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-3))

                    Label:
                        text: func.add_commas(func.remember_month(income=-3))

                    Label:
                        text: func.remember_month(-4)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-4))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-4))

                    Label:
                        text: func.add_commas(func.remember_month(income=-4))

                    Label:
                        text: func.remember_month(-5)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-5))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-5))

                    Label:
                        text: func.add_commas(func.remember_month(income=-5))

                    Label:
                        text: func.remember_month(-6)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-6))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-6))

                    Label:
                        text: func.add_commas(func.remember_month(income=-6))

                    Label:
                        text: func.remember_month(-7)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-7))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-7))

                    Label:
                        text: func.add_commas(func.remember_month(income=-7))

                    Label:
                        text: func.remember_month(-8)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-8))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-8))

                    Label:
                        text: func.add_commas(func.remember_month(income=-8))

                    Label:
                        text: func.remember_month(-9)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-9))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-9))

                    Label:
                        text: func.add_commas(func.remember_month(income=-9))

                    Label:
                        text: func.remember_month(-10)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-10))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-10))

                    Label:
                        text: func.add_commas(func.remember_month(income=-10))

                    Label:
                        text: func.remember_month(-11)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-11))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-11))

                    Label:
                        text: func.add_commas(func.remember_month(income=-11))

                    Label:
                        text: func.remember_month(-12)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-12))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-12))

                    Label:
                        text: func.add_commas(func.remember_month(income=-12))

                    Label:
                        text: func.remember_month(-13)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-13))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-13))

                    Label:
                        text: func.add_commas(func.remember_month(income=-13))

                    Label:
                        text: func.remember_month(-14)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-14))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-14))

                    Label:
                        text: func.add_commas(func.remember_month(income=-14))

                    Label:
                        text: func.remember_month(-15)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-15))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-15))

                    Label:
                        text: func.add_commas(func.remember_month(income=-15))

                    Label:
                        text: func.remember_month(-16)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-16))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-16))

                    Label:
                        text: func.add_commas(func.remember_month(income=-16))

                    Label:
                        text: func.remember_month(-17)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-17))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-17))

                    Label:
                        text: func.add_commas(func.remember_month(income=-17))

                    Label:
                        text: func.add_commas(func.remember_month(-18))

                    Label:
                        text: func.add_commas(func.remember_month(saved=-18))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-18))

                    Label:
                        text: func.add_commas(func.remember_month(income=-18))

                    Label:
                        text: func.remember_month(-19)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-19))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-19))

                    Label:
                        text: func.add_commas(func.remember_month(income=-19))

                    Label:
                        text: func.remember_month(-20)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-20))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-20))

                    Label:
                        text: func.add_commas(func.remember_month(income=-20))

                    Label:
                        text: func.remember_month(-21)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-21))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-21))

                    Label:
                        text: func.add_commas(func.remember_month(income=-21))

                    Label:
                        text: func.remember_month(-22)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-22))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-22))

                    Label:
                        text: func.add_commas(func.remember_month(income=-22))

                    Label:
                        text: func.remember_month(-23)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-23))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-23))

                    Label:
                        text: func.add_commas(func.remember_month(income=-23))
                    
                    Label:
                        text: func.remember_month(-24)

                    Label:
                        text: func.add_commas(func.remember_month(saved=-24))
                        color: func.estimated_total_savings(self.text)

                    Label:
                        text: func.add_commas(func.remember_month(spent=-24))

                    Label:
                        text: func.add_commas(func.remember_month(income=-24))

            Button:
                text: 'Close'
                on_release: root.dismiss()
                size_hint_y: None
                height: 38

